import os
import openai
import gspread
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
from oauth2client.service_account import ServiceAccountCredentials
from dotenv import load_dotenv

load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(os.getenv("SPREADSHEET_URL")).sheet1
data = sheet.get_all_records()

# –ü–æ–∏—Å–∫ –ø–æ —Ç–∞–±–ª–∏—Ü–µ
def search_table(parsed):
    result = []
    for row in data:
        if parsed["type"] == "speaker" and parsed["value"].lower() in row["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"].lower():
            result.append(row)
        if parsed["type"] == "topic" and parsed["value"].lower() in row["–¢–µ–º–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è"].lower():
            result.append(row)
    return result[:5]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    gpt_response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{
            "role": "user",
            "content": f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: "{user_input}". –ß—Ç–æ –æ–Ω —Ö–æ—á–µ—Ç: –∏–º—è —Å–ø–∏–∫–µ—Ä–∞ –∏–ª–∏ —Ç–µ–º—É? –û—Ç–≤–µ—Ç—å JSON: {{"type": "speaker/topic", "value": "..."}}'
        }]
    )
    try:
        parsed = eval(gpt_response.choices[0].message.content)
    except:
        await update.message.reply_text("ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")
        return

    results = search_table(parsed)
    if results:
        for row in results:
            msg = f"üé§ *{row['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']}*
üóÇÔ∏è {row['–¢–µ–º–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è']}
üìé {row['–°—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π']}"
            await update.message.reply_text(msg, parse_mode="Markdown")
    else:
        await update.message.reply_text("üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

def main():
    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render")
    app.run_polling()

if __name__ == "__main__":
    main()
